package poseidon

import (
	"math/big"

	"github.com/consensys/gnark/frontend"
)

func sigma(api frontend.API, in frontend.Variable) frontend.Variable {
	in2 := api.Mul(in, in)
	in4 := api.Mul(in2, in2)
	return api.Mul(in4, in)
}

func ark(api frontend.API, in []frontend.Variable, c []*big.Int, r int) []frontend.Variable {
	out := make([]frontend.Variable, len(in))
	for i, v := range in {
		out[i] = api.Add(v, c[i+r])
	}
	return out
}

func mix(api frontend.API, in []frontend.Variable, m [][]*big.Int) []frontend.Variable {
	t := len(in)
	out := make([]frontend.Variable, t)
	for i := 0; i < t; i++ {
		lc := frontend.Variable(0)
		for j := 0; j < t; j++ {
			lc = api.Add(lc, api.Mul(m[j][i], in[j]))
		}
		out[i] = lc
	}
	return out
}

func mixLast(api frontend.API, in []frontend.Variable, m [][]*big.Int, s int) frontend.Variable {
	t := len(in)
	out := frontend.Variable(0)
	for j := 0; j < t; j++ {
		out = api.Add(out, api.Mul(m[j][s], in[j]))
	}
	return out
}

func Poseidon(api frontend.API, inputs []frontend.Variable, initialState frontend.Variable, nOuts int) []frontend.Variable {
	nInputs := len(inputs)
	out := make([]frontend.Variable, nOuts)

	// Using recommended parameters from whitepaper https://eprint.iacr.org/2019/458.pdf (table 2, table 8)
	// Generated by https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/calc_round_numbers.py
	// And rounded up to nearest integer that divides by t
	nRoundsPC := [16]int{56, 57, 56, 60, 60, 63, 64, 63, 60, 66, 60, 65, 70, 60, 64, 68}
	t := nInputs + 1
	nRoundsF := 8
	nRoundsP := nRoundsPC[t-2]
	c := getConstant(C, t)
	s := getConstant(S, t)
	m := getConstant(M, t)
	p := getConstant(P, t)

	state := make([]frontend.Variable, t)
	for j := 0; j < t; j++ {
		if j == 0 {
			state[0] = initialState
		} else {
			state[j] = inputs[j-1]
		}
	}
	state = ark(api, state, c, 0)

	for r := 0; r < nRoundsF/2-1; r++ {
		for j := 0; j < t; j++ {
			state[j] = sigma(api, state[j])
		}
		state = ark(api, state, c, (r+1)*t)
		state = mix(api, state, m)
	}

	for j := 0; j < t; j++ {
		state[j] = sigma(api, state[j])
	}
	state = ark(api, state, c, nRoundsF/2*t)
	state = mix(api, state, p)

	for r := 0; r < nRoundsP; r++ {

		state[0] = sigma(api, state[0])

		state[0] = api.Add(state[0], c[(nRoundsF/2+1)*t+r])
		newState0 := frontend.Variable(0)
		for j := 0; j < len(state); j++ {
			mul := api.Mul(s[(t*2-1)*r+j], state[j])
			newState0 = api.Add(newState0, mul)
		}

		for k := 1; k < t; k++ {
			state[k] = api.Add(state[k], api.Mul(state[0], s[(t*2-1)*r+t+k-1]))
		}
		state[0] = newState0
	}

	for r := 0; r < nRoundsF/2-1; r++ {
		for j := 0; j < t; j++ {
			state[j] = sigma(api, state[j])
		}
		state = ark(api, state, c, (nRoundsF/2+1)*t+nRoundsP+r*t)
		state = mix(api, state, m)
	}

	for j := 0; j < t; j++ {
		state[j] = sigma(api, state[j])
	}

	for i := 0; i < nOuts; i++ {
		out[i] = mixLast(api, state, m, i)
	}
	return out
}

func Hash(api frontend.API, inputs ...frontend.Variable) frontend.Variable {
	out := Poseidon(api, inputs, 0, 1)
	return out[0]
}
